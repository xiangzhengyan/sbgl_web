<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	  http://www.springframework.org/schema/aop
	  http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"  default-autowire="byName">
	
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.zfysoft" >   
		<context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>   
	</context:component-scan>
	
	 <!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->    
 	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
	
	<!-- 强制使用CGLIB代理  -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 数据源properties文件 -->
	<bean id="propertyConfigurer"  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>/WEB-INF/datasource.properties</value>
        </property>
    </bean>
    
	<!-- DataSource数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${database.driver}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}"/>
		<property name="password" value="${database.password}" />
		<!--maxActive: 最大连接数量-->    
    	<property name="maxActive" value="50"/>  
    	<!--minIdle: 最小空闲连接-->    
    	<property name="minIdle" value="5"/>  
    	<!--maxIdle: 最大空闲连接-->    
    	<property name="maxIdle" value="20"/>  
    	<!--initialSize: 初始化连接-->    
    	<property name="initialSize" value="10"/>  
    	<!-- 连接被泄露时是否打印 -->  
   		<property name="logAbandoned" value="true"/>  
    	<!--removeAbandoned: 是否自动回收超时连接-->    
    	<property name="removeAbandoned"  value="true"/>  
    	<!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
    	<property name="removeAbandonedTimeout" value="10"/>  
    	<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->  
    	<property name="maxWait" value="1000"/>  
    	<!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
    	<property name="numTestsPerEvictionRun" value="10"/>  
		<!-- 以下用于解决链接自动断开的问题 -->
		<property name="validationQuery" value="${database.validationQuery}"></property>
		<property name="testWhileIdle" value="${database.testWhileIdle}"></property>
		<property name="timeBetweenEvictionRunsMillis" value="${database.timeBetweenEvictionRunsMillis}"></property>
		<property name="minEvictableIdleTimeMillis" value="${database.minEvictableIdleTimeMillis}"></property>
	</bean>
	
 	<!-- 配置SessionFactory,由Spring容器来管理Hibernate -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<!-- 配置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${database.dialect}</prop>
				
				 <prop key="hibernate.hbm2ddl.auto">update</prop>
				
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>	
				
				<prop key="org.hibernate.envers.audit_table_suffix">_aud</prop>
			    <prop key="org.hibernate.envers.audit_table_prefix"></prop>
			    <prop key="org.hibernate.envers.revision_field_name">rev</prop>
			    <prop key="org.hibernate.envers.revision_type_field_name">revtype</prop>
			    <prop key="org.hibernate.envers.revision_on_collection_change">true</prop>
			    <prop key="org.hibernate.envers.do_not_audit_optimistic_locking_field">true</prop>
			    <prop key="org.hibernate.envers.store_data_at_delete">true</prop>
			    <prop key="org.hibernate.envers.default_schema"></prop>
			    <prop key="org.hibernate.envers.default_catalog"></prop>		
			</props>
		</property>
		<property name="packagesToScan">  
            <list>  
                <value>com.zfysoft.platform.model</value>  
            </list>  
        </property>  
	</bean>
	
	<!-- spring的hibernate事务管理器
	 	责任：负责session的开启和管理，负责事务的开启、提交、回滚（遇到RuntimeException会自动回滚）	 
	  -->  	
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager" >  
 		<property name="sessionFactory">
 			<ref bean="sessionFactory"/>
		</property> 
		<property name="dataSource">
 			<ref bean="dataSource"/>
		</property> 
	</bean>
	
	<!-- 需要引入tx的命名空间 -->  
	<!-- 这是事务通知操作（传播特性），使用的事务管理器引用自 transactionManager -->  
	<tx:advice id="txAdvice" transaction-manager="txManager">  
	       <tx:attributes>  
         <!-- 指定哪些方法需要加入事务，这里懒惰一下全部加入，可以使用通配符来只加入需要的方法 -->  
            	<tx:method name="add*" propagation="REQUIRED" />  <!-- 根据每个（类）方法配置事务的传播特性 -->
            	<tx:method name="modify*" propagation="REQUIRED" /> 
            	<tx:method name="insert*" propagation="REQUIRED" /> 
            	<tx:method name="update*" propagation="REQUIRED" />
            	<tx:method name="save*" propagation="REQUIRED" />  
           		<tx:method name="delete*" propagation="REQUIRED" />
           		<tx:method name="disable*" propagation="REQUIRED" />
           		<tx:method name="grant*" propagation="REQUIRED" />  
           		<tx:method name="revoke*" propagation="REQUIRED" />    
           		<tx:method name="issue*" propagation="REQUIRED" />    
           		<tx:method name="complete*" propagation="REQUIRED" />    
           		<tx:method name="auth*" propagation="REQUIRED" />    
            	<tx:method name="select*" propagation="REQUIRED" read-only="true" /> 
           		<tx:method name="get*" propagation="REQUIRED" read-only="true"/>  
            	<tx:method name="query*" propagation="REQUIRED" read-only="true"/>  
       		</tx:attributes>  
   </tx:advice>   
   
     <!-- 需要引入aop的命名空间（配置事物的切入点） -->  
    <aop:config>  
        <!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->  
        <aop:pointcut id="serviceMethods" expression="execution(* com.zfysoft.*.service..*(..))" />      
       <!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />  
    </aop:config>
 
 
    <!-- 方便静态获取Spring管理的bean -->
    <bean class="com.zfysoft.platform.config.SpringContextHolder" lazy-init="false" />

</beans>